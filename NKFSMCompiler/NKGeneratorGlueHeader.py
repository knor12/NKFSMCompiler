__author__      = "Noreddine Kessa"
__copyright__   = "!"
__license__ = "MIT License"

from NKModelRoot import *
from NKModelTransition import *
from NKFSMVersion import *
from datetime import date
import os 

class NKGeneratorGlueHeader:

    def __init__(self, transitions, directory):
        self.transitions =transitions
        self.directory=directory
        self.UserCodeStartKey = "USER_CODE_START"
        self.UserCodeEndKey ="USER_CODE_END"
        self.userCodeImports=f'\n/*{self.UserCodeStartKey}_IMPORTS*/\n\n#include "{transitions.Name}FSM.h"\n\n/*{self.UserCodeEndKey}_IMPORTS*/\n\n'
        self.filename=f'{transitions.Name}Glue'
        self.guard = f'{transitions.Name}Glue_H'
        self.CPPGuardStart = f'\n#ifdef __cplusplus \nextern \"C\" \n{{ \n#endif		/* __cplusplus */ \n'
        self.CPPGuardEnd = f'#ifdef __cplusplus\n}}\n#endif		/* __cplusplus */\n'
        self.structName = f'struct {transitions.Name}FSM'
    
    def getFileName(self):
        filename = self.filename
        filePath=os.path.join(self.directory,filename+".h" )
        return filePath; 
   
    def __str__(self):
        handlers = self.transitions.getHandlers()
        st = f"\
/*\n\
*this file is auto generated by NKCompiler  {NKFSMVersion().getVersion()}\n\
*@file {self.filename}.h\n\
*@date {date.today()}\n\
*@author n.kessa\n\
*@brief state machine {self.filename} glue code\n\
*/\n\
\n\
\n\
#ifndef  {self.guard}\n\
#define  {self.guard}\n\
{self.CPPGuardStart}\
\n\
{self.userCodeImports}"

        for handler in handlers:
            st+=f"int {handler}({self.structName} * fsm, void * o);\n"
        st+=f"\n\
{self.CPPGuardEnd}\
#endif /*{self.guard}*/"
        return st
        
        
    def writeToFile(self):
        filename = self.filename
        filePath=os.path.join(self.directory,filename+".h" )
        #while (os.path.exists(filePath)):
        #   filename = filename + "New" 
        #   filePath=os.path.join(self.directory,filename+".h" ) 
        
        print(f'writing to {filePath}')    
        out = open(filePath, "w")
 
        #write string to file
        out.write(f'{self}')
 
        #close file
        out.close()   